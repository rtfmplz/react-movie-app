{"version":3,"sources":["logo.svg","Movie.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","MoviePoster","poster","alt","src","title","className","MovieGenre","genre","Movie","genres","synopsis","map","index","key","text","maxLine","ellipsis","trimRight","basedOn","MOVIE_LIST","App","state","_callApi","fetch","then","response","json","data","movies","catch","err","console","log","_getMovies","a","async","setState","_renderMovies","movie","id","title_english","medium_cover_image","this","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5a67c41c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './Movie.css';\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis'\n\n\n/**\n * stateless component\n * \n *    - render(), update 등 LifeCycle이 필요없는 component\n *    - just return html code\n */\n\nfunction Movie({title, poster, genres, synopsis}) {\n  return (\n    // className == class in css\n    <div className = \"Movie\">\n      <div className = \"Movie__Column\">\n        <MoviePoster poster={poster} alt={title} />\n      </div>\n      <div className = \"Movie__Column\">\n        <h1>{title}</h1>\n        <div className = \"Movie__Genres\">\n          {genres.map( (genre, index) => {\n            return <MovieGenre genre={genre} key={index} />\n          })}\n        </div>\n        <div className = \"Movie__Synopsis\">\n          <LinesEllipsis\n            text={synopsis}\n            maxLine='3'\n            ellipsis='...'\n            trimRight\n            basedOn='letters'/>   \n        </div>\n      </div>\n    </div> \n  );\n}\n\nfunction MoviePoster({poster, alt}) {\n  return (\n    <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\n  );\n}\n\nfunction MovieGenre({genre}) {\n  return (\n    <span className = \"Movie__Genre\">{genre}</span>\n  );\n}\n\n\n/**\n * propTypes를 override 해서 props의 type을 명시 할 수 있다.\n * isRequired: 필수 parameter를 정의할 수 있다.\n */ \nMovie.propTypes = {\n  title: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.array.isRequired,\n  synopsis: PropTypes.string.isRequired\n}\n\nMoviePoster.propTypes = {\n  poster: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired\n}\n\nMovieGenre.propTypes = {\n  genre: PropTypes.string.isRequired\n}\n\nexport default Movie;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Movie from './Movie';\n\n//import axios from 'axios';\n\n//https://yts.am/api/v2/list_movies.json?sort_by=rating\n\n\n/** \n * React Component LifeCycle (Deprecated 된 것들이 많으므로 실제 사용시 확인 필요)\n * \n * Create\n * \n *    constructor(): 컴포넌트가 생성되었을때 호출\n *    -> componentWillMount(): render() 전에 호출\n *    -> render(): view를 만들어주는 함수\n *    -> componentDidMount(): render() 후에 호출\n * \n * Update\n * \n *    componentWillReceiveProps(): Component가 새로운 Props를 받게 됐을때 호출\n *    -> shouldComponentUpdate(): Component의 Props나 State 변경 시 호출; default는 true이며 조건에 따라 render()를 호출\n *    -> componentWilUpdate(): shouldComponentUpdate에서 true를 return할 시 호출\n *    -> render() \n *    -> componentDidUpdate(): Component가 업데이트 된 후 호출되며 preProps와 preState 조회가 가능\n * \n * Destroy\n * \n *    componentWillUnmount(): Component가 Destroy된 후 호출된다.\n */\n\nconst MOVIE_LIST = \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\";\n\nclass App extends Component {\n\n  // state는 React Component 안의 object\n  // state가 바뀔 때 마다, Update 가 발생한다.\n  state = {\n  }\n\n  _callApi = () => {\n    // return Promise<Response> by AJAX\n    return fetch(MOVIE_LIST)\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n\n    // using axios library\n    // axios.get(MOVIE_LIST)\n    // .then(response => response.data)\n    // .then(response => console.log(response))\n    // .catch(err => console.log(err))\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    })\n  }\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map( movie => {\n      // 엘리먼트가 많은 경우 key를 넣어 줘야 함\n      return < Movie \n        key={movie.id}\n        title={movie.title_english}\n        poster={movie.medium_cover_image}\n        genres={movie.genres}\n        synopsis={movie.synopsis}\n        />\n    })\n    return movies\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {movies ? this._renderMovies() : \"Loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\n\n/**\n * React v.s. ReactDom v.s. ReactNative\n * \n *  - React: UI Library\n *  - ReactDom: React를 Browser에 출력하도록 도와주는 Model\n *  - ReactNative: React를 모바일 앱에서 출력하도록 도와주는 Model\n */\n\n// ReactDOM 은 render 한다. App을 id 가 root 인 곳에\n// ReactDOM.render(reactElement, domContainerNode)\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n\n\n"],"sourceRoot":""}