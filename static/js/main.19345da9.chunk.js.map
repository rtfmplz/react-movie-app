{"version":3,"sources":["components/Movie.js","components/App.js","index.js"],"names":["MoviePoster","poster","alt","src","title","className","MovieGenre","genre","Movie","genres","synopsis","map","index","key","text","maxLine","ellipsis","trimRight","basedOn","MOVIE_LIST","App","state","_callApi","fetch","then","response","json","data","movies","catch","err","console","log","_getMovies","a","async","setState","_renderMovies","movie","id","title_english","medium_cover_image","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"2VAuCA,SAASA,EAAT,GAAqC,IAAfC,EAAc,EAAdA,OAAQC,EAAM,EAANA,IAC5B,OACE,yBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKG,UAAU,kBAItD,SAASC,EAAT,GAA8B,IAATC,EAAQ,EAARA,MACnB,OACE,0BAAMF,UAAY,gBAAgBE,GAyBvBC,MA5Df,YAAmD,IAAnCJ,EAAkC,EAAlCA,MAAOH,EAA2B,EAA3BA,OAAQQ,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,SACrC,OAEE,yBAAKL,UAAY,SACf,yBAAKA,UAAY,iBACf,kBAACL,EAAD,CAAaC,OAAQA,EAAQC,IAAKE,KAEpC,yBAAKC,UAAY,iBACf,4BAAKD,GACL,yBAAKC,UAAY,iBACdI,EAAOE,KAAK,SAACJ,EAAOK,GACnB,OAAO,kBAACN,EAAD,CAAYC,MAAOA,EAAOM,IAAKD,QAG1C,yBAAKP,UAAY,mBACf,kBAAC,IAAD,CACES,KAAMJ,EACNK,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,iBCDdC,G,MAAa,4DA6DJC,E,2MAvDbC,MAAQ,G,EAGRC,SAAW,WAET,OAAOC,MAAMJ,GACZK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKC,UACvBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,EAS5BG,WAAa,0BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAGU,EAAKZ,YAHf,OAGLM,EAHK,OAKX,EAAKQ,SAAS,CACZR,WANS,sC,EAcbS,cAAgB,WAWd,OAVe,EAAKhB,MAAMO,OAAOjB,KAAK,SAAA2B,GAEpC,OAAO,kBAAE,EAAF,CACLzB,IAAKyB,EAAMC,GACXnC,MAAOkC,EAAME,cACbvC,OAAQqC,EAAMG,mBACdhC,OAAQ6B,EAAM7B,OACdC,SAAU4B,EAAM5B,e,mFAXpBgC,KAAKT,e,+BAiBG,IACAL,EAAWc,KAAKrB,MAAhBO,OACR,OACE,yBAAKvB,UAAWuB,EAAS,MAAQ,gBAC9BA,EAASc,KAAKL,gBAAkB,e,GArDvBM,IAAMC,WCjBxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.19345da9.chunk.js","sourcesContent":["import React from 'react';\nimport './Movie.css';\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis'\n\n\n/**\n * stateless function component\n * \n *    - render(), update 등 LifeCycle이 필요없는 component\n *    - just return JSX(html) code\n */\nfunction Movie({title, poster, genres, synopsis}) {\n  return (\n    // className == class in HTML\n    <div className = \"Movie\">\n      <div className = \"Movie__Column\">\n        <MoviePoster poster={poster} alt={title} />\n      </div>\n      <div className = \"Movie__Column\">\n        <h1>{title}</h1>\n        <div className = \"Movie__Genres\">\n          {genres.map( (genre, index) => {\n            return <MovieGenre genre={genre} key={index} />\n          })}\n        </div>\n        <div className = \"Movie__Synopsis\">\n          <LinesEllipsis\n            text={synopsis}\n            maxLine='3'\n            ellipsis='...'\n            trimRight\n            basedOn='letters'/>   \n        </div>\n      </div>\n    </div> \n  );\n}\n\nfunction MoviePoster({poster, alt}) {\n  return (\n    <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\n  );\n}\n\nfunction MovieGenre({genre}) {\n  return (\n    <span className = \"Movie__Genre\">{genre}</span>\n  );\n}\n\n\n/**\n * propTypes를 override 해서 props의 type을 명시 할 수 있다.\n * isRequired: 필수 parameter를 정의할 수 있다.\n */ \nMovie.propTypes = {\n  title: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\n  synopsis: PropTypes.string.isRequired\n}\n\nMoviePoster.propTypes = {\n  poster: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired\n}\n\nMovieGenre.propTypes = {\n  genre: PropTypes.string.isRequired\n}\n\nexport default Movie;\n","import React from 'react';\nimport './App.css';\nimport Movie from './Movie';\nimport axios from 'axios';\n\n\n/** \n * React Component LifeCycle (Deprecated 된 것들이 많으므로 실제 사용시 확인 필요)\n * \n * @see https://ko.reactjs.org/docs/react-component.html\n * \n * Mount\n * \n *    constructor(): Component가 생성되었을때 호출\n *    -> static getDerivedStateFromProps()\n *    -> render(): view를 만들어주는 함수; 구현돼야하는 유일한 메서드\n *    -> componentDidMount(): Component가 마운트된 직후, 즉 트리에 삽입된 직후에 호출\n * \n * Update\n * \n *    static getDerivedStateFromProps()\n *    -> shouldComponentUpdate()\n *    -> render()\n *    -> getSnapshotBeforeUpdate()\n *    -> componentDidUpdate(): Component가 업데이트 된 후 호출되며 preProps와 preState 조회가 가능\n * \n * Unmount\n * \n *    componentWillUnmount(): Component가 Destroy된 후 호출된다.\n */\n\nconst MOVIE_LIST = \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\";\n\nclass App extends React.Component {\n\n  // state는 React Component 안의 object\n  // state가 바뀔 때 마다, Update 가 발생한다.\n  state = {\n  }\n\n  _callApi = () => {\n    // return Promise<Response> by AJAX\n    return fetch(MOVIE_LIST)\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n\n    // using axios library\n    // axios.get(MOVIE_LIST)\n    // .then(response => response.data)\n    // .then(response => console.log(response))\n    // .catch(err => console.log(err))\n  }\n\n  _getMovies = async () => {\n    // await 키워드는 async 함수 내에서만 사용될 수 있으며 동기적으로 프로미스를 기다릴 수 있도록 해준다.\n    // 만약 async 밖에서 프로미스를 사용하면 여전히 then 콜백을 사용해야 한다.\n    const movies = await this._callApi()\n    // setState()를 이용해야 lifeCycle 함수들이 호출, render()가 호출된다.\n    this.setState({\n      movies\n    })\n  }\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map( movie => {\n      // 엘리먼트가 많은 경우 key를 넣어 줘야 함\n      return < Movie \n        key={movie.id}\n        title={movie.title_english}\n        poster={movie.medium_cover_image}\n        genres={movie.genres}\n        synopsis={movie.synopsis}\n        />\n    })\n    return movies\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {movies ? this._renderMovies() : \"Loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n\n/**\n * React v.s. ReactDom v.s. ReactNative\n * \n *  - React: UI Library\n *  - ReactDom: React를 Browser에 출력하도록 도와주는 Model\n *  - ReactNative: React를 모바일 앱에서 출력하도록 도와주는 Model\n */\n\n// ReactDOM 은 render 한다. App을 id 가 root 인 곳에\n// ReactDOM.render(reactElement, domContainerNode)\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}